// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wChannel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hnet {

namespace {

const ::google::protobuf::Descriptor* wChannelOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wChannelOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* wChannelClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wChannelClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* wChannelQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wChannelQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* wChannelTerminate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wChannelTerminate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wChannel_2eproto() {
  protobuf_AddDesc_wChannel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wChannel.proto");
  GOOGLE_CHECK(file != NULL);
  wChannelOpen_descriptor_ = file->message_type(0);
  static const int wChannelOpen_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelOpen, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelOpen, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelOpen, fd_),
  };
  wChannelOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wChannelOpen_descriptor_,
      wChannelOpen::default_instance_,
      wChannelOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wChannelOpen));
  wChannelClose_descriptor_ = file->message_type(1);
  static const int wChannelClose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelClose, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelClose, slot_),
  };
  wChannelClose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wChannelClose_descriptor_,
      wChannelClose::default_instance_,
      wChannelClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelClose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wChannelClose));
  wChannelQuit_descriptor_ = file->message_type(2);
  static const int wChannelQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelQuit, pid_),
  };
  wChannelQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wChannelQuit_descriptor_,
      wChannelQuit::default_instance_,
      wChannelQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wChannelQuit));
  wChannelTerminate_descriptor_ = file->message_type(3);
  static const int wChannelTerminate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelTerminate, pid_),
  };
  wChannelTerminate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wChannelTerminate_descriptor_,
      wChannelTerminate::default_instance_,
      wChannelTerminate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelTerminate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wChannelTerminate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wChannelTerminate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wChannel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wChannelOpen_descriptor_, &wChannelOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wChannelClose_descriptor_, &wChannelClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wChannelQuit_descriptor_, &wChannelQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wChannelTerminate_descriptor_, &wChannelTerminate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wChannel_2eproto() {
  delete wChannelOpen::default_instance_;
  delete wChannelOpen_reflection_;
  delete wChannelClose::default_instance_;
  delete wChannelClose_reflection_;
  delete wChannelQuit::default_instance_;
  delete wChannelQuit_reflection_;
  delete wChannelTerminate::default_instance_;
  delete wChannelTerminate_reflection_;
}

void protobuf_AddDesc_wChannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016wChannel.proto\022\004hnet\"5\n\014wChannelOpen\022\013"
    "\n\003pid\030\001 \002(\005\022\014\n\004slot\030\002 \002(\005\022\n\n\002fd\030\003 \002(\005\"*\n"
    "\rwChannelClose\022\013\n\003pid\030\001 \002(\005\022\014\n\004slot\030\002 \002("
    "\005\"\033\n\014wChannelQuit\022\013\n\003pid\030\001 \002(\005\" \n\021wChann"
    "elTerminate\022\013\n\003pid\030\001 \002(\005", 184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wChannel.proto", &protobuf_RegisterTypes);
  wChannelOpen::default_instance_ = new wChannelOpen();
  wChannelClose::default_instance_ = new wChannelClose();
  wChannelQuit::default_instance_ = new wChannelQuit();
  wChannelTerminate::default_instance_ = new wChannelTerminate();
  wChannelOpen::default_instance_->InitAsDefaultInstance();
  wChannelClose::default_instance_->InitAsDefaultInstance();
  wChannelQuit::default_instance_->InitAsDefaultInstance();
  wChannelTerminate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wChannel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wChannel_2eproto {
  StaticDescriptorInitializer_wChannel_2eproto() {
    protobuf_AddDesc_wChannel_2eproto();
  }
} static_descriptor_initializer_wChannel_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int wChannelOpen::kPidFieldNumber;
const int wChannelOpen::kSlotFieldNumber;
const int wChannelOpen::kFdFieldNumber;
#endif  // !_MSC_VER

wChannelOpen::wChannelOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wChannelOpen::InitAsDefaultInstance() {
}

wChannelOpen::wChannelOpen(const wChannelOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wChannelOpen::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  slot_ = 0;
  fd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wChannelOpen::~wChannelOpen() {
  SharedDtor();
}

void wChannelOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wChannelOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wChannelOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wChannelOpen_descriptor_;
}

const wChannelOpen& wChannelOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wChannel_2eproto();  return *default_instance_;
}

wChannelOpen* wChannelOpen::default_instance_ = NULL;

wChannelOpen* wChannelOpen::New() const {
  return new wChannelOpen;
}

void wChannelOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
    slot_ = 0;
    fd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wChannelOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }
      
      // required int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fd;
        break;
      }
      
      // required int32 fd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wChannelOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }
  
  // required int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }
  
  // required int32 fd = 3;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wChannelOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }
  
  // required int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }
  
  // required int32 fd = 3;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wChannelOpen::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // required int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }
    
    // required int32 fd = 3;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wChannelOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wChannelOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wChannelOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wChannelOpen::MergeFrom(const wChannelOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wChannelOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wChannelOpen::CopyFrom(const wChannelOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wChannelOpen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void wChannelOpen::Swap(wChannelOpen* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(slot_, other->slot_);
    std::swap(fd_, other->fd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wChannelOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wChannelOpen_descriptor_;
  metadata.reflection = wChannelOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wChannelClose::kPidFieldNumber;
const int wChannelClose::kSlotFieldNumber;
#endif  // !_MSC_VER

wChannelClose::wChannelClose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wChannelClose::InitAsDefaultInstance() {
}

wChannelClose::wChannelClose(const wChannelClose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wChannelClose::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wChannelClose::~wChannelClose() {
  SharedDtor();
}

void wChannelClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wChannelClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wChannelClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wChannelClose_descriptor_;
}

const wChannelClose& wChannelClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wChannel_2eproto();  return *default_instance_;
}

wChannelClose* wChannelClose::default_instance_ = NULL;

wChannelClose* wChannelClose::New() const {
  return new wChannelClose;
}

void wChannelClose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wChannelClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }
      
      // required int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wChannelClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }
  
  // required int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wChannelClose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }
  
  // required int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wChannelClose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // required int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wChannelClose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wChannelClose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wChannelClose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wChannelClose::MergeFrom(const wChannelClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wChannelClose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wChannelClose::CopyFrom(const wChannelClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wChannelClose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void wChannelClose::Swap(wChannelClose* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wChannelClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wChannelClose_descriptor_;
  metadata.reflection = wChannelClose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wChannelQuit::kPidFieldNumber;
#endif  // !_MSC_VER

wChannelQuit::wChannelQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wChannelQuit::InitAsDefaultInstance() {
}

wChannelQuit::wChannelQuit(const wChannelQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wChannelQuit::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wChannelQuit::~wChannelQuit() {
  SharedDtor();
}

void wChannelQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wChannelQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wChannelQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wChannelQuit_descriptor_;
}

const wChannelQuit& wChannelQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wChannel_2eproto();  return *default_instance_;
}

wChannelQuit* wChannelQuit::default_instance_ = NULL;

wChannelQuit* wChannelQuit::New() const {
  return new wChannelQuit;
}

void wChannelQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wChannelQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wChannelQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wChannelQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wChannelQuit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wChannelQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wChannelQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wChannelQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wChannelQuit::MergeFrom(const wChannelQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wChannelQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wChannelQuit::CopyFrom(const wChannelQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wChannelQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void wChannelQuit::Swap(wChannelQuit* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wChannelQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wChannelQuit_descriptor_;
  metadata.reflection = wChannelQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wChannelTerminate::kPidFieldNumber;
#endif  // !_MSC_VER

wChannelTerminate::wChannelTerminate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wChannelTerminate::InitAsDefaultInstance() {
}

wChannelTerminate::wChannelTerminate(const wChannelTerminate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wChannelTerminate::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wChannelTerminate::~wChannelTerminate() {
  SharedDtor();
}

void wChannelTerminate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wChannelTerminate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wChannelTerminate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wChannelTerminate_descriptor_;
}

const wChannelTerminate& wChannelTerminate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wChannel_2eproto();  return *default_instance_;
}

wChannelTerminate* wChannelTerminate::default_instance_ = NULL;

wChannelTerminate* wChannelTerminate::New() const {
  return new wChannelTerminate;
}

void wChannelTerminate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wChannelTerminate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wChannelTerminate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wChannelTerminate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wChannelTerminate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wChannelTerminate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wChannelTerminate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wChannelTerminate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wChannelTerminate::MergeFrom(const wChannelTerminate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wChannelTerminate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wChannelTerminate::CopyFrom(const wChannelTerminate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wChannelTerminate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void wChannelTerminate::Swap(wChannelTerminate* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wChannelTerminate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wChannelTerminate_descriptor_;
  metadata.reflection = wChannelTerminate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hnet

// @@protoc_insertion_point(global_scope)
